<?xml version="1.0" encoding="UTF-8"?><project name="DurableVerse" company="Trilobytes" webLink="https://git.iiens.net/trilobytes/durableverse" view-date="2020-03-03" view-index="0" gantt-divider-location="256" resource-divider-location="256" version="2.8.10" locale="fr">
    <description/>
    <view zooming-state="default:2" id="gantt-chart">
        <field id="tpd3" name="Nom" width="140" order="0"/>
        <field id="tpd4" name="Date de début" width="56" order="1"/>
        <field id="tpd5" name="Date de fin" width="56" order="2"/>
        <option id="taskLabelUp" value="name"/>
        <option id="taskLabelDown" value="resources"/>
        <option id="taskLabelRight" value="length"/>
    </view>
    <view id="resource-table">
        <field id="0" name="Nom" width="178" order="0"/>
        <field id="1" name="Rôle par défaut" width="74" order="1"/>
    </view>
    <!-- -->
    <calendars>
        <day-types>
            <day-type id="0"/>
            <day-type id="1"/>
            <default-week id="1" name="default" sun="0" mon="0" tue="0" wed="0" thu="0" fri="0" sat="0"/>
            <only-show-weekends value="false"/>
            <overriden-day-types/>
            <days/>
        </day-types>
    </calendars>
    <tasks empty-milestones="true">
        <taskproperties>
            <taskproperty id="tpd0" name="type" type="default" valuetype="icon"/>
            <taskproperty id="tpd1" name="priority" type="default" valuetype="icon"/>
            <taskproperty id="tpd2" name="info" type="default" valuetype="icon"/>
            <taskproperty id="tpd3" name="name" type="default" valuetype="text"/>
            <taskproperty id="tpd4" name="begindate" type="default" valuetype="date"/>
            <taskproperty id="tpd5" name="enddate" type="default" valuetype="date"/>
            <taskproperty id="tpd6" name="duration" type="default" valuetype="int"/>
            <taskproperty id="tpd7" name="completion" type="default" valuetype="int"/>
            <taskproperty id="tpd8" name="coordinator" type="default" valuetype="text"/>
            <taskproperty id="tpd9" name="predecessorsr" type="default" valuetype="text"/>
        </taskproperties>
        <task id="7" name="Lot A" color="#000000" meeting="false" start="2020-03-06" duration="17" complete="0" thirdDate="2020-03-08" thirdDate-constraint="0" expand="true">
            <task id="0" name="Tâche A.1" color="#8cb6ce" meeting="false" start="2020-03-20" duration="3" complete="0" thirdDate="2020-03-08" thirdDate-constraint="0" expand="true">
                <notes>
                    <![CDATA[	Votre rôle est central pour le Lot A. Lisez les tâches de tous les membres du groupe avant de commencer.

	Mettez en place le dépôt git et invitez votre encadrant sur votre dépôt en tant que rapporter ainsi que tous les
membres du groupe en tant que developper. Ce git contiendra votre code. Créez une première branche lot_a. Le
dernier commit de cette branche contiendra le code du Lot A une fois celui-ci terminé.

	Créer un projet avec GanttProject et poussez le sur votre dépot git, dans la branche lot_a. Remplissez ce fichier
avec les différentes tâches du Lot A. Mettez des durées arbitraires sur vos tâches. Ajoutez chaque membre du groupe
comme ressource. Affectez les ressources aux tâches après décision de qui effectue quelle tâche.

	Codez le fichier main.c. Ce fichier devra utiliser toutes les fonctions et uniquement les fonctions qui
auront été ajoutées dans les interfaces remplies par les autres membres du groupe. Remarque : Ce fichier restera
normalement inchangé tout le long du Lot B. Une fois ce dernier terminé, main.c pourra être compilé en un
exécutable qui fera tourner le projet.

	Vérifiez, une fois toutes les interfaces rédigées, que votre fichier main.c compile.

	Faites valider le Lot A par votre encadrant une fois toutes les tâches terminées.

	Vous devez maintenir le dépot git à jour au fur et à mesure de l’avancement de votre travail.

]]>
                </notes>
            </task>
            <task id="2" name="Tâche A.2" color="#8cb6ce" meeting="false" start="2020-03-06" duration="14" complete="0" thirdDate="2020-03-08" thirdDate-constraint="0" expand="true">
                <notes>
                    <![CDATA[L’interface plateau.h est en charge du plateau de jeu. Elle doit permettre d’accéder à l’ensemble des cartes
présentes sur le plateau, la main, les decks et la défausse de chaque ENSIIE. Elle doit également permettre de
modifier ce plateau en fonction des décisions prises par les ENSIIE au cours du jeu.

L’interface carte.h permettra de manipuler les cartes du jeu. Elle est très sommairement définie ici, seul le type
carte y est défini.

Aucune de ces fonctions n’échange d’informations avec les joueurs humain (pas de printf, pas de
scanf). C’est le rôle de interface.h.

Ajoutez chacun des types et des fonctions suivants, avec les paramètres qui vous semblent adéquats à vous et à
votre référent pour coder le fichier main.c de la tâche A.1. Documentez ensuite ces fonctions.

— le type carte qui permettra de manipuler chaque carte du jeu (accéder au coût ou à l’effet d’une carte)

— le type plateau qui permettra de manipuler l’ensemble des cartes présentes sur le plateau de jeu (ceci inclu
la main, le deck et la défausse de chaque ENSIIE). La plupart des fonctions qui suivent prendront un plateau
en entrée et le modifieront ou renverront des informations relatives à ce plateau. Ce type peut être abstrait.
Il sera alors défini concrètement dans le Lot B.

— une fonction pour créer un nouveau plateau

— une fonction pour libérer la mémoire attribuée à un plateau

— une fonction pour signifier au plateau qu’un nouveau tour commence. Elle permettra par exemple d’incré-
menter le compteur de tour, de gérer les carte FISA et de mettre à jour les espaces disponibles pour les cartes
Personnels sur le plateau.

— une fonction pour calculer combien de cartes seront piochées par une ENSIIE au début de sa phase.

— une fonction pour qu’une ENSIIE pioche une carte
Vous devez maintenir le dépot git à jour au fur et à mesure de l’avancement de votre travail.
]]>
                </notes>
                <depend id="0" type="2" difference="0" hardness="Rubber"/>
            </task>
            <task id="3" name="Tâche A.3" color="#8cb6ce" meeting="false" start="2020-03-06" duration="14" complete="0" thirdDate="2020-03-08" thirdDate-constraint="0" expand="true">
                <notes>
                    <![CDATA[L’interface plateau.h est en charge du plateau de jeu. Elle doit permettre d’accéder à l’ensemble des cartes
présentes sur le plateau, la main, les decks et la défausse de chaque ENSIIE. Elle doit également permettre de
modifier ce plateau en fonction des décisions prises par les ENSIIE au cours du jeu.

L’interface carte.h permettra de manipuler les cartes du jeu. Elle est très sommairement définie ici, seul le type
carte y est défini.

Aucune de ces fonctions n’échange d’informations avec les joueurs humain (pas de printf, pas de
scanf). C’est le rôle de interface.h.

Ajoutez chacun des types et des fonctions suivants, avec les paramètres qui vous semblent adéquats à vous et à
votre référent pour coder le fichier main.c de la tâche A.1. Documentez ensuite ces fonctions.

— une fonction pour calculer combien de cartes Elève une ENSIIE recevra au début de sa phase.

— une ou deux fonctions pour ajouter une carte Élève de type FISE ou FISA au plateau de jeu d’une ENSIIE.
Attention, c’est le rôle de interface.h de demander au joueur s’il souhaite une carte FISE ou FISA.

— une fonction pour calculer le nombre de PE disponibles par une ENSIIE après avoir posé sa ou ses nouvelles
cartes Élèves.

— une fonction pour permettre à une ENSIIE de jouer une carte de sa main

— une fonction pour signifier au plateau que le tour est terminé. Elle permettra, entre autres, de faire le calcul
des DD gagnés par chaque ENSIIE à la fin du tour.

— une fonction pour déterminer si la partie est finie, et si oui si un joueur a gagné ou s’il y a égalité.
Vous devez maintenir le dépot git à jour au fur et à mesure de l’avancement de votre travail.
]]>
                </notes>
                <depend id="0" type="2" difference="0" hardness="Rubber"/>
            </task>
            <task id="4" name="Tâche A.4" color="#8cb6ce" meeting="false" start="2020-03-06" duration="14" complete="0" thirdDate="2020-03-08" thirdDate-constraint="0" expand="true">
                <notes>
                    <![CDATA[L’interface interface.h est en charge de tous les échanges entre les joueurs humains et le jeu : afficher le plateau,
demander si le joueur veut une carte FISE ou FISA, demander s’il souhaite finir sa phase, . . .

Aucune de ces fonctions ne modifie le plateau de jeu. C’est le rôle de plateau.h.

Ajoutez chacun des types et des fonctions suivants, avec les paramètres qui vous semblent adéquats à vous et à
votre référent pour coder le fichier main.c de la tâche A.1. Documentez ensuite ces fonctions.

— une fonction pour afficher en console un message signifiant qu’un nouveau tour commence ; avec toutes les
informations utiles (notamment si un nouvel espace pour les cartes Personnel est apparu)

— une fonction pour afficher en console un message signifiant qu’une nouvelle phase commence et l’ENSIIE
associée à cette phase

— une fonction pour afficher le plateau

— une fonction pour demander à un joueur qui reçoit une nouvelle carte Elève s’il souhaite ajouter une carte
FISE ou FISA.

— une fonction pour demander à un joueur de choisir une carte de sa main ou de finir sa phase. La fonction ne
proposera que des cartes de la main qui coûtent moins cher que le nombre de PE du joueur. Si aucune carte
n’est moins chère, alors seul le choix de finir sa phase est proposé au joueur.

— une fonction qui affiche le gagnant du jeu ou égalité le cas échéant.

Vous devez maintenir le dépot git à jour au fur et à mesure de l’avancement de votre travail.

]]>
                </notes>
                <depend id="0" type="2" difference="0" hardness="Rubber"/>
            </task>
        </task>
    </tasks>
    <resources>
        <resource id="0" name="Drive" function="Default:0" contacts="" phone=""/>
        <resource id="4" name="Eniris" function="Default:0" contacts="" phone=""/>
        <resource id="6" name="Maru" function="Default:0" contacts="" phone=""/>
        <resource id="7" name="Mitei" function="Default:0" contacts="" phone=""/>
    </resources>
    <allocations>
        <allocation task-id="0" resource-id="0" function="Default:0" responsible="true" load="100.0"/>
        <allocation task-id="2" resource-id="4" function="Default:0" responsible="true" load="100.0"/>
        <allocation task-id="3" resource-id="6" function="Default:0" responsible="true" load="100.0"/>
        <allocation task-id="4" resource-id="7" function="Default:0" responsible="true" load="100.0"/>
    </allocations>
    <vacations/>
    <previous/>
    <roles roleset-name="Default"/>
</project>
